#include <inttypes.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include "nibble_aes.h"

typedef struct {
    uint64_t pt;
    uint64_t ct;
} pt_ct_t;

typedef short (*match_diff_t)(const uint64_t a, const uint64_t b);

{% for end in ends %}
#define MASK_{{end}} {{masks[end]}}{% endfor %}

static short is_match_diff_{{start}}(const uint64_t a, const uint64_t b) {
{{logics[start]}}
}
{% for end in ends %}
static int cmp_passive_{{end}}(const void *a, const void *b) {
    uint64_t inta = ((pt_ct_t*) a)->ct & MASK_{{end}};
    uint64_t intb = ((pt_ct_t*) b)->ct & MASK_{{end}};
    return (inta < intb) ? -1 : (inta > intb);
}

static short is_match_diff_{{end}}(const uint64_t a, const uint64_t b) {
{{logics[end]}}
}
{% endfor %}

static void gen_pt_cts(pt_ct_t *ptcts, const uint16_t *key, const uint64_t i) {
    uint16_t pt[4], ct[4];
{{passive_logic}}

{{start_active_logic}}
    encrypt(pt, ct, key);

    pt_ct_t pt_ct = {0};
    pt_ct.pt = convert_int(pt);
    pt_ct.ct = convert_int(ct);
    ptcts[{{id_active_logic}}] = pt_ct;
{{end_active_logic}}
}

static void print_pairs(pt_ct_t *ptcts, uint16_t end, uint64_t mask, match_diff_t f) {
    uint32_t k, l;
    uint64_t inactive_nibs;
    for (k = 0; k < {{16 ** num_active}}; ++k) {
        inactive_nibs = ptcts[k].ct & mask;
        l = k + 1;
        while ((ptcts[l].ct & mask) == inactive_nibs) {
            if (
                is_match_diff_{{start}}(ptcts[k].pt, ptcts[l].pt) &&
                f(ptcts[k].ct, ptcts[l].ct)
            ) {
                printf(
                    "%05d %016" PRIx64 " %016" PRIx64 " %016" PRIx64  " %016" PRIx64 "\n",
                    end,
                    ptcts[k].pt,
                    ptcts[k].ct,
                    ptcts[l].pt,
                    ptcts[l].ct
                );
            }
            ++l;
        }
    }
}

int main(int argc, char **argv) {
    if (argc != 4) {
        printf("Usage: %s [key] [start] [end]\n", argv[0]);
        return 1;
    }

    uint16_t key[4] = {0};
    convert_array(strtoull(argv[1], NULL, 10), key);
    uint64_t start = strtoull(argv[2], NULL, 10);
    uint64_t end = strtoull(argv[3], NULL, 10);

    uint64_t i;
    pt_ct_t ptcts[{{16 ** num_active}}] = {0};
    for (i = start; i < end; ++i) {
        gen_pt_cts(ptcts, key, i);
        {% for end in ends %}
        qsort(ptcts, {{16 ** num_active}}, sizeof(pt_ct_t), cmp_passive_{{end}});
        print_pairs(ptcts, {{end}}, MASK_{{end}}, is_match_diff_{{end}});{% endfor %}
    }
}

